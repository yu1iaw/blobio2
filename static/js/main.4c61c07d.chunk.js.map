{"version":3,"sources":["hook/hook.js","App.js","serviceWorker.js","index.js"],"names":["usePeopleResponsibly","reorder","list","startIndex","endIndex","result","Array","from","splice","removed","move","source","destination","droppableSource","droppableDestination","sourceClone","destClone","index","droppableId","getItemStyle","isDragging","draggableStyle","backgroundColor","App","mixfood","JSON","parse","localStorage","getItem","product","id","useState","foodList","setFoodList","useEffect","setItem","stringify","className","onDragEnd","sInd","dInd","items","newState","filter","group","length","map","item","key","provided","droppableProps","ref","innerRef","el","i","isDragDisabled","draggableId","snapshot","dragHandleProps","draggableProps","style","opacity","placeholder","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","render","document","getElementById","URL","process","href","origin","addEventListener","fetch","response","contentType","headers","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.4c61c07d.chunk.js","sourcesContent":["const usePeopleResponsibly = () => {\r\n\tconst reorder = (list, startIndex, endIndex) => {\r\n\t\tconst result = Array.from(list);\r\n\t\tconst [removed] = result.splice(startIndex, 1);\r\n\t\tresult.splice(endIndex, 0, removed);\r\n\r\n\t\treturn result;\r\n\t};\r\n\r\n\tconst move = (source, destination, droppableSource, droppableDestination) => {\r\n\t\tconst sourceClone = Array.from(source);\r\n\t\tconst destClone = Array.from(destination);\r\n\t\tconst [removed] = sourceClone.splice(droppableSource.index, 1);\r\n\t\tdestClone.splice(droppableDestination.index, 0, removed);\r\n\t\tconst result = {};\r\n\t\tresult[droppableSource.droppableId] = sourceClone;\r\n\t\tresult[droppableDestination.droppableId] = destClone;\r\n\r\n\t\treturn result;\r\n\t};\r\n\r\n\tconst getItemStyle = (isDragging, draggableStyle) => ({\r\n\t\tbackgroundColor: isDragging ? \"#ffff99\" : \"\",\r\n\t\t...draggableStyle,\r\n\t});\r\n\r\n\treturn { reorder, move, getItemStyle };\r\n};\r\n\r\nexport default usePeopleResponsibly;\r\n","import React, { useState, useEffect } from 'react';\nimport { DragDropContext, Droppable, Draggable } from 'react-beautiful-dnd';\nimport usePeopleResponsibly from './hook/hook';\nimport './App.css';\n\n\nfunction App() {\n  const ingredients = [\n    { product: 'pepper', id: '123' },\n    { product: 'tomato', id: '345' },\n    { product: 'beans', id: '567' },\n    { product: 'chili sauce', id: '789' },\n    { product: 'some magik', id: '901' }\n  ];\n\n  const ingredients2 = [\n    { product: 'eggplant', id: '9' },\n    { product: 'onion', id: '1' },\n    { product: 'carrot', id: '3' },\n    { product: 'veal', id: '5' },\n    { product: 'dill', id: '1001' },\n    { product: 'walnuts', id: '7' },\n    { product: 'cilantro', id: '10' }\n  ];\n\n  \n  const mixfood = JSON.parse(localStorage.getItem('ingredients')) || [ingredients, ingredients2];\n  const [foodList, setFoodList] = useState(mixfood);\n  const {reorder, move, getItemStyle} = usePeopleResponsibly();\n\n  useEffect(() => {\n    localStorage.setItem('ingredients', JSON.stringify(foodList));\n  }, [foodList])\n  \n\n  function onDragEnd(result) {\n    const { source, destination } = result;\n    \n    if (!destination) {\n      return;\n    }\n    const sInd = +source.droppableId;\n    const dInd = +destination.droppableId;\n\n    if (sInd === dInd) {\n      const items = reorder(foodList[sInd], source.index, destination.index);\n      const newState = [...foodList];\n      newState[sInd] = items;\n      setFoodList(newState);\n    } else {\n      const result = move(foodList[sInd], foodList[dInd], source, destination);\n      const newState = [...foodList];\n      newState[sInd] = result[sInd];\n      newState[dInd] = result[dInd];\n\n      setFoodList(newState.filter(group => group.length));\n    }\n  }\n\n  return (\n    <div className='app'>\n      <DragDropContext onDragEnd={onDragEnd}>\n        {foodList.map((item, index) => {\n          return (\n            <Droppable key={index} droppableId={`${index}`}>\n              {provided => (\n                <ul {...provided.droppableProps}\n                  ref={provided.innerRef}>\n                  {index === 0 ? <h3><span>RHCP</span> ingredients</h3> : <h3>Drag your flavour:</h3>}\n                  {item.map((el, i) => {\n                    const isDragDisabled = index === 1 && item.length < 5 || index === 0 && item.length <= 3;\n                    return (\n                      <Draggable key={el.id} draggableId={el.id} index={i} \n                                 isDragDisabled={isDragDisabled}>\n                        {(provided, snapshot) => (\n                          <li ref={provided.innerRef}\n                            {...provided.dragHandleProps}\n                            {...provided.draggableProps}\n                            style={getItemStyle(snapshot.isDragging, provided.draggableProps.style)}>\n                              {el.product}\n                          </li>\n                        )}\n                      </Draggable>\n                    )\n                  })}\n                  <span style={{ opacity: 0 }}>{provided.placeholder}</span>\n                </ul>\n              )}\n            </Droppable>\n          )\n        })}\n      </DragDropContext>\n    </div>\n  )\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\nserviceWorker.register();\n"],"sourceRoot":""}